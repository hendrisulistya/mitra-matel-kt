syntax = "proto3";

package grpc;

option go_package = "github.com/JoSoft/mitra-matel/proto_gen/proto/grpc";

// Health check request
message HealthCheckRequest {
  string service = 1; // Optional: specific service to check
}

// Health check response
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
  string message = 2;
  int64 timestamp = 3;
  map<string, string> metadata = 4;
}

// Connection status for real-time monitoring
message ConnectionStatusRequest {
  string client_id = 1;
  int64 last_ping = 2;
}

message ConnectionStatusResponse {
  enum ConnectionState {
    UNKNOWN = 0;
    CONNECTED = 1;
    DISCONNECTED = 2;
    RECONNECTING = 3;
  }
  ConnectionState state = 1;
  int64 server_time = 2;
  int32 active_connections = 3;
  string server_version = 4;
}

// Real-time heartbeat for connection monitoring
message HeartbeatRequest {
  string client_id = 1;
  int64 client_timestamp = 2;
  map<string, string> client_info = 3;
}

message HeartbeatResponse {
  string server_id = 1;
  int64 server_timestamp = 2;
  int32 latency_ms = 3;
  bool connection_healthy = 4;
}

// Health service definition
service HealthService {
  // Standard health check
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Streaming health check for real-time monitoring
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
  
  // Connection status check
  rpc GetConnectionStatus(ConnectionStatusRequest) returns (ConnectionStatusResponse);
  
  // Real-time heartbeat - bidirectional streaming
  rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse);
}